server:
  port: 8088

spring:
  application:
    name: api-gateway
  cloud:
    nacos:
      server-addr: localhost:8848
      discovery:
        username: nacos
        password: nacos
        namespace: public

#    gateway:
#      discovery:
#        locator:
#          enabled: true  #是否启动自动识别nacos服务

    gateway:
      #路由规则
      routes:
        - id: order_route  #用于标识路由的唯一标识
          uri: lb://order-service #目标服务  lb:使用 nacos本地负载均衡
      #断言规则 用于路由规则匹配
          predicates:
            - Path=/stock-srv/**
            - Header=X-Request-Red, \d+  #请求头匹配
        # http://localhost:8088/order-srv/order/ 路由到   http://localhost:8011/order/
          filters: #过滤器
            - StripPrefix=1 #转发前，去掉第一层路径
            - AddRequestParameter=color,blue  #添加请求参数
#            - CheckAuth=blue #自定义过滤器
#            - AddRequestHeader=X-Request-red,blue #添加请求头
#            - PrefixPath=/order-srv/order/ #转发前，添加前缀
#            - RedirectTo=302,http://www.baidu.com #重定向
#            - StaticResponse=200,{"name":"zhangsan"} #返回静态响应
            - name: RequestRateLimiter #开启限流配置
              args:
                key-resolver: "#{@ipKeyResolver}"  #自定义限流key
                redis-rate-limiter.replenishRate: 1  #令牌桶每秒填充平均速率
                redis-rate-limiter.burstCapacity: 1  #令牌桶最大容量
                redis-rate-limiter.requestedTokens: 1  #每次请求所需令牌数

#跨域配置
      globalcors:
        cors-configurations:
            '[/**]':  #跨域允许访问的资源
                allowedOrigins: "*"  #跨域允许的来源
                allowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
                allowedHeaders:
                - "*"
                allowCredentials: true
                maxAge: 3600

    sentinel:
      transport:
        dashboard: localhost:8801
#      web-context-unify: false   #默认将调用链路收敛了
      scg:
        fallback:
          mode: response
          response-body: '{"code":500,"msg":"系统繁忙，请稍后再试"}'